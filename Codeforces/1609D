#include <bits/stdc++.h>
#pragma GCC optimize("03")
#pragma GCC target("sse4")
using namespace std;

typedef long long ll;
typedef long double ld;
typedef complex<ld> cd;
typedef pair<int, int> pi;
typedef pair<ll, ll> pl;
typedef pair<ld, ld> pd;
typedef vector<int> vi;
typedef vector<ld> vd;
typedef vector<ll> vl;
typedef vector<pi> vpi;
typedef vector<pl> vpl;
typedef vector<cd> vcd;
#define trav(a, x) for (auto &a : x)
#define sz(x) (int)(x).size()
#define mp make_pair
#define pb push_back
#define f first
#define s second
#define lb lower_bound
#define ub upper_bound
#define all(x) x.begin(), x.end()
#define ins insert
#define nl "\n"
#define rep(i,n) for(int i=0; i<n; i++)
#define sp " "


struct DSU{
	vector<int> p;
	vector<int> size;

	DSU(int n){
		p.resize(n+1);
		for(int i=1; i<=n; i++) p[i]=i;
		size.assign(n+1,1);
	}
	int find(int x){
		return (x==p[x]? x: (p[x] = find(p[x])));
	}

	void merge(int x,int y){
		x= find(x); y = find(y);
		if(x==y) return;
		p[x] = y;
		size[y]+=size[x];
		size[x]=0;
	}
};





void solve(){
	int n,d; cin >>n>>d;
	DSU ds(n);
	int add=0;
	for(int i=0; i<d; i++){
		int x,y; cin >>x>>y;
		if(ds.find(x)!=ds.find(y)){
			ds.merge(x,y);
		}
		else{
			add++;
		}
		vector<int> largest;
		for(int i=1;i<=n; i++){
			if(ds.find(i)==i){
				largest.pb(ds.size[i]);
			}
		}
		sort(all(largest),greater<int>());
		int sum=0;
		int s = sz(largest);
		for(int i=0; i<= add; i++){
			sum+=largest[i];
		}
		cout << sum-1<<nl;
	}


}


int main(){
	ios::sync_with_stdio(0);
	cin.tie(0);
	int t=1;
//	cin>>t;
	while(t--){
		solve();
	}
}
